stages:
 - build
 - package
 - release

# For more information on Maven see
#  https://gitlab.com/gitlab-org/gitlab-ci-yml/blob/master/Maven.gitlab-ci.yml

# For more information on Docker see
#  https://gitlab.com/gitlab-org/gitlab-ci-yml/blob/master/Docker.gitlab-ci.yml


build:maven:
  image: jimador/docker-jdk-8-maven-node
  stage: build
  variables:
    MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
    MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"
  script:
    - mvn $MAVEN_CLI_OPTS clean package
    - cat target/site/jacoco/index.html
    - bash <(curl -s https://codecov.io/bash) -t $CODECOV_TOKEN
  tags:
    - docker
  cache:
    key: "$CI_JOB_NAME"
    paths:
      - .m2/repository
  artifacts:
    paths:
      - target/network-map-service.jar
      - target/site/jacoco/index.html

code_quality:
  stage: build
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run
        --env SOURCE_CODE="$PWD"
        --volume "$PWD":/code
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/codequality:$SP_VERSION" /code
  artifacts:
    paths: [gl-code-quality-report.json]
  tags:
    - docker

#sast:
#  stage: build
#  image: docker:stable
#  variables:
#    DOCKER_DRIVER: overlay2
#  allow_failure: true
#  services:
#    - docker:stable-dind
#  script:
#    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
#    - docker run
#        --env SAST_CONFIDENCE_LEVEL="${SAST_CONFIDENCE_LEVEL:-3}"
#        --volume "$PWD:/code"
#        --volume /var/run/docker.sock:/var/run/docker.sock
#        "registry.gitlab.com/gitlab-org/security-products/sast:$SP_VERSION" /app/bin/run /code
#  artifacts:
#    paths: [gl-sast-report.json]
#  tags:
#    - docker

package:docker:
  stage: package
  image: docker:latest
  variables:
    DOCKER_DRIVER: overlay2
  services:
    - docker:stable-dind
  image: docker:latest
  script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker build -t ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID} .
    - docker push ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}
  tags:
    - docker

release:docker:
  stage: release
  image: docker:latest
  variables:
    DOCKER_DRIVER: overlay2
  services:
    - docker:stable-dind
  stage: release
  script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker pull ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}
    - docker tag ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID} ${CI_REGISTRY_IMAGE}/${CI_PROJECT_NAME}:latest # backward compatible
    - docker tag ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID} ${CI_REGISTRY_IMAGE}:edge ; docker push ${CI_REGISTRY_IMAGE}:edge
    - docker tag ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID} ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG:-edge} ; docker push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG:-edge}
    - if [ -n "$CI_COMMIT_TAG" ]; then docker tag ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID} ${CI_REGISTRY_IMAGE}:latest ; docker push ${CI_REGISTRY_IMAGE}:latest; fi
    - docker login -u "${DOCKER_HUB_USER}" -p "${DOCKER_HUB_PASSWORD}"
    - docker tag ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID} cordite/network-map:edge ; docker push cordite/network-map:edge
    - docker tag ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID} cordite/network-map:${CI_COMMIT_TAG:-edge} ; docker push cordite/network-map:${CI_COMMIT_TAG:-edge}
    - if [ -n "$CI_COMMIT_TAG" ]; then docker tag ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID} cordite/network-map:latest ; docker push cordite/network-map:latest; fi
  tags:
    - docker
  only:
    - master
    - tags
